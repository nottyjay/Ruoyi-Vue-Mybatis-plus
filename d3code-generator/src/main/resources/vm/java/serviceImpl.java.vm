package ${packageName}.service.impl;

import java.util.List;

import com.alphay.boot.common.core.domain.TreeSelect;
import com.alphay.boot.common.utils.tree.TreeUtil;
import org.springframework.stereotype.Service;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.alphay.boot.common.mybatis.service.ServiceImplX;
#if($table.tree)
import cn.hutool.core.util.ObjUtil;
import cn.hutool.core.collection.CollUtil;
import com.alphay.boot.common.exception.ServiceException;
#elseif($table.sub)
import java.util.ArrayList;
import com.alphay.boot.common.utils.StringUtils;
import org.springframework.transaction.annotation.Transactional;
import ${packageName}.domain.${subClassName};
#end
import ${packageName}.mapper.${ClassName}Mapper;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;

/**
 * ${functionName}Service业务层处理
 *
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}ServiceImpl extends ServiceImplX<${ClassName}Mapper, ${ClassName}> implements I${ClassName}Service
{

#if($table.tree)
#foreach ($column in $columns)
    #if($column.columnName == $table.treeCode)
        #set($pkFieldColumn=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #end
    #if($column.columnName == $table.treeParentCode)
        #set($parentPkFieldCoumn=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
    #end
#end
    @Override
    public List<TreeSelect> select${ClassName}TreeList(${ClassName} ${className}) {
      return TreeUtil.buildTreeSelect(
              select${ClassName}List(${className}),
              ${ClassName}::get${pkFieldColumn},
              ${ClassName}::get${TreeName}
      );
    }

    @Override
    public boolean save(${ClassName} entity) {
        if(entity.get${parentPkFieldCoumn}() != null && entity.get${parentPkFieldCoumn}() != 0L){
            ${ClassName} info = this.getById(entity.get${parentPkFieldCoumn}());
            // 如果父节点不为正常状态，则不允许新增子节点
            if (info == null) {
                throw new ServiceException("${functionName}停用，不允许新增");
            }
            entity.setAncestors(info.getAncestors() + "," + entity.get${parentPkFieldCoumn}());
        }else {
          entity.setAncestors("0");
        }
        return super.save(entity);
    }

    @Override
    public boolean updateById(${ClassName} entity) {
      ${ClassName} parentData = this.getById(entity.get${parentPkFieldCoumn}());
      ${ClassName} persistentData = this.getById(entity.get${pkFieldColumn}());
      if (ObjUtil.isNotNull(parentData) && ObjUtil.isNotNull(persistentData)) {
        String newAncestors =
                  parentData.getAncestors() + "," + parentData.get${pkFieldColumn}();
        String oldAncestors = persistentData.getAncestors();
        entity.setAncestors(newAncestors);
        this.updateChildren(entity.get${pkFieldColumn}(), newAncestors, oldAncestors);
      }
      return super.updateById(entity);
    }

    private void updateChildren(${pkColumn.javaType} ${pkColumn.javaField}, String newAncestors, String oldAncestors){
      List<${ClassName}> children = baseMapper.selectChildrenListByTreeId(${pkColumn.javaField});
      if (CollUtil.isNotEmpty(children)) {
        for (${ClassName} child : children) {
          child.setAncestors(
              child.getAncestors().replaceFirst(oldAncestors, newAncestors));
        }
        this.updateBatchById(children);
      }
    }
#end

    /**
     * 查询${functionName}列表
     *
     * @param ${className} ${functionName}
     * @param page 分页
     * @return ${functionName}
     */
    @Override
    public List<${ClassName}> select${ClassName}List(${ClassName} ${className}, IPage page)
    {
        return this.list(page, this.lambdaQueryWrapperX()
#foreach($column in $columns)
#set($queryType=$column.queryType)
#set($javaField=$column.javaField)
#set($javaType=$column.javaType)
#set($columnName=$column.columnName)
#set($AttrName=$column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})
#if($column.query)
#if($column.queryType == "EQ")
                  .eqIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#elseif($queryType == "NE")
                  .neIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#elseif($queryType == "GT")
                  .gtIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#elseif($queryType == "GTE")
                  .geIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#elseif($queryType == "LT")
                  .ltIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#elseif($queryType == "LTE")
                  .leIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#elseif($queryType == "LIKE")
                  .likeIfPresent(${ClassName}::get${AttrName}, ${className}.get${AttrName}())
#end
#end
#end
                  .orderByDesc(${ClassName}::getCreateTime)
                  .last(${className}.getParamsDataScope())
                );
    }

#if($table.sub)
    /**
     * 查询${functionName}
     *
     * @param ${pkColumn.javaField} ${functionName}ID
     * @return ${functionName}
     */
    public ${ClassName} getById(${pkColumn.javaType} ${pkColumn.javaField}){
        ${ClassName} ${className} = super.getById(${pkColumn.javaField});
        List<${subClassName}> ${subclassName}s = baseMapper.select${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
        ${className}.set${subClassName}List(${subclassName}s);
        return ${className};
    }

    /**
     * 新增${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Transactional
    @Override
    public boolean save(${ClassName} ${className}){
        boolean result = super.save(${className});
        insert${subClassName}(${className});
        return result;
    }

    /**
     * 修改${functionName}
     *
     * @param ${className} ${functionName}
     * @return 结果
     */
    @Transactional
    @Override
    public boolean updateById(${ClassName} ${className}) {
        baseMapper.delete${subClassName}By${subTableFkClassName}(${className}.get${pkColumn.capJavaField}());
        insert${subClassName}(${className});
        return super.updateById(${className});
    }

    /**
     * 删除${functionName}
     *
     * @param ${pkColumn.javaField} 需要删除的${functionName}ID
     * @return 结果
     */
    @Transactional
    public boolean removeById(${pkColumn.javaType} ${pkColumn.javaField}){
        baseMapper.delete${subClassName}By${subTableFkClassName}(${pkColumn.javaField});
        return super.removeById(${pkColumn.javaField});
    }

    /**
     * 批量删除${functionName}
     *
     * @param ${pkColumn.javaField}s 需要删除的${functionName}ID
     * @return 结果
     */
    @Transactional
    public boolean removeByIds(List<${pkColumn.javaType}> ${pkColumn.javaField}s){
        baseMapper.delete${subClassName}By${subTableFkClassName}s(${pkColumn.javaField}s);
        return super.removeByIds(${pkColumn.javaField}s);
    }

    /**
     * 新增${subTable.functionName}信息
     *
     * @param ${className} ${functionName}对象
     */
    public void insert${subClassName}(${ClassName} ${className})
    {
        List<${subClassName}> ${subclassName}List = ${className}.get${subClassName}List();
        ${pkColumn.javaType} ${pkColumn.javaField} = ${className}.get${pkColumn.capJavaField}();
        if (StringUtils.isNotNull(${subclassName}List))
        {
            List<${subClassName}> list = new ArrayList<${subClassName}>();
            for (${subClassName} ${subclassName} : ${subclassName}List)
            {
                ${subclassName}.set${subTableFkClassName}(${pkColumn.javaField});
                list.add(${subclassName});
            }
            if (list.size() > 0)
            {
                baseMapper.batch${subClassName}(list);
            }
        }
    }
#end
}
